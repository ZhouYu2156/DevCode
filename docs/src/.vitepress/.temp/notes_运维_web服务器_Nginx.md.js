import { ssrRenderAttrs, ssrRenderAttr, ssrRenderStyle } from "vue/server-renderer";
import { useSSRContext } from "vue";
import { _ as _export_sfc } from "./plugin-vue_export-helper.yVxbj29m.js";
const _imports_0 = "/assets/nginx服务工作原理.d_L6PF1_.png";
const _imports_1 = "/assets/dns解析本地服务器ip.eVwndbp7.png";
const __pageData = JSON.parse('{"title":"Nginx 服务器配置","description":"","frontmatter":{},"headers":[],"relativePath":"notes/运维/web服务器/Nginx.md","filePath":"notes/运维/web服务器/Nginx.md","lastUpdated":null}');
const _sfc_main = { name: "notes/运维/web服务器/Nginx.md" };
function _sfc_ssrRender(_ctx, _push, _parent, _attrs, $props, $setup, $data, $options) {
  _push(`<div${ssrRenderAttrs(_attrs)}><h1 id="nginx-服务器配置" tabindex="-1">Nginx 服务器配置 <a class="header-anchor" href="#nginx-服务器配置" aria-label="Permalink to &quot;Nginx 服务器配置&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">推荐教程</p><ul><li>20分钟搞懂<code>Nginx</code>核心知识：<a href="https://www.bilibili.com/video/BV1TZ421b7SD/" target="_blank" rel="noreferrer">技术蛋老师讲解Nginx</a></li><li>参考资料：<a href="https://docs.nginx.com/nginx/admin-guide/web-server/" target="_blank" rel="noreferrer">前往Nginx官方文档</a></li></ul></div><h2 id="nginx-工作原理图" tabindex="-1"><code>Nginx</code> 工作原理图 <a class="header-anchor" href="#nginx-工作原理图" aria-label="Permalink to &quot;\`Nginx\` 工作原理图&quot;">​</a></h2><p><img${ssrRenderAttr("src", _imports_0)} alt="工作原理图" loading="lazy"></p><h2 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h2><blockquote><p>本机安装<code>nginx</code>基于<code>红帽 Centos 7.6</code> 版本</p></blockquote><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">$</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> yum -y install nginx</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="nginx-常用命令" tabindex="-1">nginx 常用命令 <a class="header-anchor" href="#nginx-常用命令" aria-label="Permalink to &quot;nginx 常用命令&quot;">​</a></h2><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">$</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> systemctl start nginx     # 启动nginx</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">$</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> systemctl status nginx    # 查看nginx状态</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">$</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> systemctl restart nginx   # 重启nginx</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">$</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> nginx -s stop             # 快速停止nginx</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">$</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> nginx -s quit             # 优雅关闭nginx，在退出前完成已经接收的连接请求</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">$</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> ngixn -t                  # 测试配置是否有效</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">$</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> nginx -s reload           # 重新加载配置文件</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">$</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> nginx -t </span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">&amp;&amp; </span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">nginx</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}"> -s</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> reload # 每次对配置文件进行修改后，需要重新加载配置文件才能生效</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="查看nginx进程" tabindex="-1">查看nginx进程 <a class="header-anchor" href="#查看nginx进程" aria-label="Permalink to &quot;查看nginx进程&quot;">​</a></h2><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">$</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> ps -ef </span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">|</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}"> grep</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> nginx                           # 查看所有的nginx进程</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">$</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> ps -aux </span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">|</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}"> grep</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> &quot;nginx: master process&quot;</span><span style="${ssrRenderStyle({ "--shiki-light": "#6A737D", "--shiki-dark": "#6A737D" })}">        # 查看nginx主进程</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">$</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> kill </span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">-9</span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}"> &lt;</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">pi</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">d</span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">&gt;</span><span style="${ssrRenderStyle({ "--shiki-light": "#6A737D", "--shiki-dark": "#6A737D" })}">                                 # 强制杀死进程</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">$</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> systemctl start nginx                         # 等待半分钟后再启动，遇到的一些问题基本上就能解决</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">$</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> systemctl daemon-reload                       # 重新加载系统服务配置</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="配置文件" tabindex="-1">配置文件 <a class="header-anchor" href="#配置文件" aria-label="Permalink to &quot;配置文件&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">说明：</p><ul><li>通过 <code>yum install</code> 安装的 <code>nginx</code> 的默认配置如下：</li><li><code>nginx</code>配置文件路径: <code>/etc/nginx/nginx.conf</code></li><li><code>nginx</code>默认配置的对外共享资源路径：<code>/usr/share/nginx/html/</code></li><li><code>nginx错误请求日志文件</code>: <code>cat /var/log/nginx/error.log</code></li><li><code>nginx成功请求日志文件</code>: <code>/var/log/nginx/access.log</code> 记录了所有成功的请求日志</li><li>通过<code>tail -f /var/log/nginx/error.log</code> 命令实时刷新查看错误日志文件</li></ul></div><h2 id="本地域名解析" tabindex="-1">本地域名解析 <a class="header-anchor" href="#本地域名解析" aria-label="Permalink to &quot;本地域名解析&quot;">​</a></h2><blockquote><p>在 <code>C:\\\\Windows\\\\System32\\\\drivers\\\\etc\\\\hosts</code> 文件中追加自己想要解析的<code>IP地址</code>和<code>域名</code>关系。(也就是追加你本地的<code>ip 和 域名</code>对应关系，当在浏览器访问时，首先从本地看该域名是否有对应的<code>ip地址</code>，有的话就会想本地解析出来的<code>ip地址</code>发起资源访问。没有的话就向<code>DNS</code>服务器发起请求，请求到对应的<code>ip地址</code>，再向该<code>ip地址</code>发起资源访问。)</p></blockquote><div class="language-txt vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span># other settings</span></span>
<span class="line"><span></span></span>
<span class="line"><span>192.168.40.20	nginx.zhouyu2156.com</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="dns-域名解析" tabindex="-1"><code>DNS</code> 域名解析 <a class="header-anchor" href="#dns-域名解析" aria-label="Permalink to &quot;\`DNS\` 域名解析&quot;">​</a></h2><blockquote><ul><li>利用云解析<code>DNS服务器</code>的方式来解析我们本地的<code>服务器IP</code>也行，添加一条记录将<code>域名</code>指向我们的本地的<code>服务器IP</code>。</li></ul></blockquote><p><img${ssrRenderAttr("src", _imports_1)} alt="dns解析本地服务器ip" loading="lazy"></p><h2 id="核心配置" tabindex="-1">核心配置 <a class="header-anchor" href="#核心配置" aria-label="Permalink to &quot;核心配置&quot;">​</a></h2><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-ElBo7" id="tab-yMySkuc" checked="checked"><label for="tab-yMySkuc">nginx.conf</label><input type="radio" name="group-ElBo7" id="tab-kMCfU65"><label for="tab-kMCfU65">default.conf</label></div><div class="blocks"><div class="language-md vp-adaptive-theme active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">events {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF", "--shiki-light-font-weight": "bold", "--shiki-dark-font-weight": "bold" })}">  # event是用来告诉nginx如何处理连接的，可以为空，但不能没有</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">}</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">http {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF", "--shiki-light-font-weight": "bold", "--shiki-dark-font-weight": "bold" })}">  # 这个块记录http服务配置</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">  include /etc/nginx/mime.types;        # 引入mime类型配置文件(这个记录了告诉客户端每种后缀的资源解析(渲染)方式)</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">  include /etc/nginx/conf.d/*.conf;     # 引入其他配置文件, 这里引入了我自定义的 default.conf 文件</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><div class="language-md vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">server {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF", "--shiki-light-font-weight": "bold", "--shiki-dark-font-weight": "bold" })}">  # 这个块记录服务器配置</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">  listen      80;           # 监听外部访问的端口</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">  server_name localhost;    # 配置匹配外部请求时的域名</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">  root /app/dist/;          # 返回的静态资源根目录</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">  index index.html;         # 指定默认返回的首页文件, 可以是其他文件名</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></div></div><div class="warning custom-block"><p class="custom-block-title">注意事项：</p><ul><li>在<code>server</code>块下直接定义的<code>root</code>表示所有请求默认寻找资源的根路径。</li><li><code>location</code> 块中定义的<code>root</code>表示匹配某个特殊请求路径时寻找资源的根路径。</li></ul></div><ul><li>可以通过<code>server</code>块的<code>return</code>指令返回自定义内容</li></ul><div class="language-md vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">server {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">  listen      80;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">  server_name localhost;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF", "--shiki-light-font-weight": "bold", "--shiki-dark-font-weight": "bold" })}">  # 格式: return 状态码 消息;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">  return 200 &quot;this is return directive message.\\n&quot;;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="server-name-块配置" tabindex="-1"><code>server_name</code> 块配置 <a class="header-anchor" href="#server-name-块配置" aria-label="Permalink to &quot;\`server_name\` 块配置&quot;">​</a></h2><p>支持的配置方式</p><ul><li>完整匹配</li></ul><div class="language-md vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">server_name zhouyu2156.cn www.zhouyu2156.cn;    # 支持配置多个，以空格分隔开每个域名</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>通配符匹配</li></ul><div class="language-md vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">server_name *.zhouyu2156.cn;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>通配符结束匹配</li></ul><div class="language-md vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">server_name zhouyu2156.*;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>正则匹配</li></ul><div class="language-md vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">server_name ~^www</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">\\.</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">zhouyu2156</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">\\.</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">com$;        # 使用正则表达式的语法来匹配符合规则的所有域名</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="location-块配置" tabindex="-1"><code>location</code> 块配置 <a class="header-anchor" href="#location-块配置" aria-label="Permalink to &quot;\`location\` 块配置&quot;">​</a></h2><div class="warning custom-block"><p class="custom-block-title">注意事项：</p><ul><li>（1）请求方式一： <code>/path</code> 表示访问的是 <code>/path</code> 路径对应的文件，也就是访问路径末尾不带<code>/</code>表示访问的是一个具体的文件</li><li>（2）请求方式二： <code>/path/</code> 表示访问的是 <code>/path/</code> 路径对应的默认返回文件，也就是访问路径末尾带<code>/</code>表示访问的是一个目录，而目录是不会直接返回给你的，只能返回一个默认的文件资源咯。</li></ul></div><ul><li>🍍<code>(模糊匹配)</code>指定匹配具有某段字符开头的请求</li></ul><div class="tip custom-block"><p class="custom-block-title">提示：</p><ul><li>以路径模糊匹配的方式来访问资源，这个可以让我们在浏览器访问时，只要请求路径中的开头部分至少有了<code>location</code> 后面定义的一段开头字符，就会匹配成功。比如我们的<code>location</code>定义为<code>/app</code>，那么用户可以成功访问至少以<code>/app</code>字符开头的所有请求，比如<code>/apple/</code>、<code>/app/Programming</code>等，只要后面的资源路径能够与<code>root</code>指令中的路径拼接成功，都会返回资源。</li></ul></div><ul><li>示例：</li></ul><div class="info custom-block"><p class="custom-block-title">解释：</p><blockquote><p>下面这段代码，首先假设我们有个资源的路径资源<code>/app/apple/Prgramming/index.html</code></p></blockquote><ul><li>当我们在浏览器访问<code>/apple/Programming</code>路径时，那么<code>location</code>模糊匹配到了<code>/app</code>开头的请求，因为请求路径是<code>/apple/Programming</code>嘛</li><li>接着会进入<code>location</code>块中，将<code>location</code>块的<code>root</code>指令中的资源路径与请求路径进行拼接，得到<code>/app/apple/Programming</code>，当发现末尾没有<code>/</code>结尾，说明是要返回一个文件资源，经过查找没有<code>Programming</code>这个文件资源，那么会尝试加一个<code>/</code>重定向一下找<code>/.../Programming/</code>资源，这是在请求一个<code>/xxx/Programming/</code>下的默认文件资源，没有设置默认返回文件资源的话，那么就是返回该目录下的<code>index.html</code>文件。</li><li>所以，模糊匹配是只要<code>请求路径</code>中具有我们<code>location</code>中写的一段开头的匹配字符，就会匹配成功进入<code>location</code>块中处理。</li></ul></div><div class="language-md vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">server {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">  listen      80;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">  server_name localhost;</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">  root /app/dist/;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">  index index.html;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">  location /app {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">        root /app/;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">  }</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><ul><li>🍒<code>(绝对匹配)</code>指定完整路径匹配</li></ul><div class="tip custom-block"><p class="custom-block-title">说明</p><ul><li>只有<code>请求路径</code><strong>完全等于</strong> <code>/Programming/</code> 时才能与<code>location</code>后面的路径匹配上，从而再拼接<code>location</code>块的<code>root</code>指令对应的路径获取资源返回给用户。</li></ul></div><div class="language-md vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">server {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">  listen      80;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">  server_name localhost;</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">  root /app/dist/;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">  index index.html;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">  location = /Programming/ {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">        root /app/;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">  }</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><ul><li>🍊<code>(正则匹配)</code>使用正则表达式匹配请求路径</li></ul><div class="tip custom-block"><p class="custom-block-title">说明</p><ul><li>在<code>location</code>块后面使用<code>~</code>来启用正则表达匹配。</li><li>在<code>~</code>后面添加<code>*</code>表示忽略大小写。</li></ul></div><ul><li>示例：</li></ul><div class="language-md vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">server {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">    # ...</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">    location ~* /video/video[</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#DBEDFF", "--shiki-light-text-decoration": "underline", "--shiki-dark-text-decoration": "underline" })}">0-9</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">].mp4 {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">        root /app/;     # 返回 /app/video/video[</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#DBEDFF", "--shiki-light-text-decoration": "underline", "--shiki-dark-text-decoration": "underline" })}">0-9</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">].mp4 所有资源。</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">    }</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="匹配优先级表" tabindex="-1">匹配优先级表 <a class="header-anchor" href="#匹配优先级表" aria-label="Permalink to &quot;匹配优先级表&quot;">​</a></h2><ul><li>总共分为四大类：<code>模糊匹配</code>、<code>精确匹配</code>、<code>优先前缀</code>、<code>正则匹配</code></li></ul><table><thead><tr><th style="${ssrRenderStyle({ "text-align": "center" })}">匹配符</th><th style="${ssrRenderStyle({ "text-align": "center" })}">匹配规则</th><th style="${ssrRenderStyle({ "text-align": "center" })}">优先级</th></tr></thead><tbody><tr><td style="${ssrRenderStyle({ "text-align": "center" })}"><code>=</code></td><td style="${ssrRenderStyle({ "text-align": "center" })}">精确匹配</td><td style="${ssrRenderStyle({ "text-align": "center" })}">1</td></tr><tr><td style="${ssrRenderStyle({ "text-align": "center" })}"><code>^~</code></td><td style="${ssrRenderStyle({ "text-align": "center" })}">以某个字符串开头(优先前缀)</td><td style="${ssrRenderStyle({ "text-align": "center" })}">2</td></tr><tr><td style="${ssrRenderStyle({ "text-align": "center" })}"><code>~</code></td><td style="${ssrRenderStyle({ "text-align": "center" })}">区分大小写的正则匹配</td><td style="${ssrRenderStyle({ "text-align": "center" })}">3</td></tr><tr><td style="${ssrRenderStyle({ "text-align": "center" })}"><code>~*</code></td><td style="${ssrRenderStyle({ "text-align": "center" })}">不区分大小写的正则匹配</td><td style="${ssrRenderStyle({ "text-align": "center" })}">4</td></tr><tr><td style="${ssrRenderStyle({ "text-align": "center" })}"><code>!~</code></td><td style="${ssrRenderStyle({ "text-align": "center" })}">区分大小写不匹配的正则</td><td style="${ssrRenderStyle({ "text-align": "center" })}">5</td></tr><tr><td style="${ssrRenderStyle({ "text-align": "center" })}"><code>!~*</code></td><td style="${ssrRenderStyle({ "text-align": "center" })}">不区分大小写不匹配的正则</td><td style="${ssrRenderStyle({ "text-align": "center" })}">6</td></tr><tr><td style="${ssrRenderStyle({ "text-align": "center" })}"><code>/</code></td><td style="${ssrRenderStyle({ "text-align": "center" })}">通用匹配(模糊匹配)，任何请求都会匹配到</td><td style="${ssrRenderStyle({ "text-align": "center" })}">7</td></tr></tbody></table><h2 id="重定向-307" tabindex="-1">重定向 <code>307</code> <a class="header-anchor" href="#重定向-307" aria-label="Permalink to &quot;重定向 \`307\`&quot;">​</a></h2><ul><li>将用户请求重定向到新的路径资源，但是这种重定向方式，用户是可以察觉的，也就是先将请求状态码和请求资源路径返回给客户端，然后客户端会自动进行新的跳转。</li></ul><div class="language-md vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">server {</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">    # ...</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">    location /temp {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">        return 307 /temp/tmp.html;  # 状态码 新的资源路径</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">    }</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="重写路径" tabindex="-1">重写路径 <a class="header-anchor" href="#重写路径" aria-label="Permalink to &quot;重写路径&quot;">​</a></h2><ul><li>通过<code>rewrite</code>指令可以更丝滑的重定向用户请求到新的路径资源。也就是在服务器端改写请求的资源获取路径。</li><li>改写后的资源路径会拼接上<code>location</code>块的<code>root</code>指令中的资源路径。如果没有，那么就以<code>loaction / {}</code>中定义的<code>root</code>为基础路径进行拼接。比如下面的配置，当我们访问<code>http://域名/tmp</code>最终就会返回<code>/app/Programming/index.html</code>资源</li></ul><div class="language-md vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">server {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">    # ...</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">    rewrite /tmp /Programming/index.html;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">    location / {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">      root /app/;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">    }</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="使用try-files指令尝试匹配资源" tabindex="-1">使用<code>try_files</code>指令尝试匹配资源 <a class="header-anchor" href="#使用try-files指令尝试匹配资源" aria-label="Permalink to &quot;使用\`try_files\`指令尝试匹配资源&quot;">​</a></h2><div class="language-md vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">server {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF", "--shiki-light-font-weight": "bold", "--shiki-dark-font-weight": "bold" })}">  # ...</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">  location / {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">    add_header X-debug-uri &quot;$uri&quot;;  # add_header指令用于增加自定义响应首部</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">    try_files $uri $uri/ =404;    # 尝试匹配用户访问的路径资源，失败的话就再尝试匹配末尾加</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">\`/\`</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">目录下的资源，如果还是失败的话就返回404。</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">  }</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="返回自定义错误页面" tabindex="-1">返回自定义错误页面 <a class="header-anchor" href="#返回自定义错误页面" aria-label="Permalink to &quot;返回自定义错误页面&quot;">​</a></h2><ul><li>通过 <code>error_page</code> 指令可以返回自定义的错误页面。</li></ul><div class="language-md vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">server {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF", "--shiki-light-font-weight": "bold", "--shiki-dark-font-weight": "bold" })}">  # ...</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">  error_page 404 /app/dist/404.html;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="反向代理" tabindex="-1">反向代理 <a class="header-anchor" href="#反向代理" aria-label="Permalink to &quot;反向代理&quot;">​</a></h2><ul><li>通过<code>proxy_pass</code>字段定义反向代理的服务器信息。</li></ul><div class="language-md vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">server {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF", "--shiki-light-font-weight": "bold", "--shiki-dark-font-weight": "bold" })}">  # ...</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">  location / {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">    proxy_pass 192.168.40.20:3001;  # 定义单个反向代理的服务器</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">    # proxy_pass http://192.168.40.20:3001; # 两者都行，加不加http没有关系</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">  }</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="定义多台反向代理的服务器" tabindex="-1">定义多台反向代理的服务器 <a class="header-anchor" href="#定义多台反向代理的服务器" aria-label="Permalink to &quot;定义多台反向代理的服务器&quot;">​</a></h2><ul><li>通过<code>upstream</code>指令定义反向代理的服务器集群。告诉<code>nginx</code>把客户端的请求流量导到指定的服务器集群，再通过负载均衡分配到集群里面的服务器。</li><li>因为现实中服务器的性能配置可能不太一样，因此我们就必须把更多的流量分配给高配置的服务器，低配的服务器则分担少一点的流量。此时我们就可以设置<code>weight</code>，并且自定义数值表示服务器的权重。<code>weight</code>数值相对越大，被分配到的次数就会相对越多。</li></ul><div class="language-md vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">upstream backend-servers {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">  server localhost:3000 weight=2;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">  server localhost:3001 weight=6;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF", "--shiki-light-font-weight": "bold", "--shiki-dark-font-weight": "bold" })}">  # 定义反向代理的服务器集群...</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">}</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">server {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF", "--shiki-light-font-weight": "bold", "--shiki-dark-font-weight": "bold" })}">  # ...</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">  location /serve {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">    proxy_pass http://backend-servers;  # 定义了upstream后，可以通过upstream名称来定义反向代理的服务器集群</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">  }</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div></div>`);
}
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("notes/运维/web服务器/Nginx.md");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
const Nginx = /* @__PURE__ */ _export_sfc(_sfc_main, [["ssrRender", _sfc_ssrRender]]);
export {
  __pageData,
  Nginx as default
};
